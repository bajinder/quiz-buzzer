From e6990174592280e09ce55028d7f70d3742ade6d0 Mon Sep 17 00:00:00 2001
From: Bajinder Singh <BajinderSingh@MacBook-Pro.local>
Date: Thu, 22 Sep 2016 15:27:11 +1000
Subject: [PATCH] Server updated

---
 server/index.js     | 100 +++++++++++++++++++++++++++++-----------------------
 server/package.json |   2 +-
 server/rooms.js     |   3 +-
 3 files changed, 58 insertions(+), 47 deletions(-)

diff --git a/server/index.js b/server/index.js
index f74b882..440ea88 100644
--- a/server/index.js
+++ b/server/index.js
@@ -13,8 +13,10 @@ var roomNumber = -1;
 var sockets = {}; //Array for cross ref for socketID and player ID
 var rooms = []; //Array of rooms vs host vs players
 //starting the server
-server.listen(process.env.PORT || 3030, function () {
-  console.log('Server started at 8080');
+var port = process.env.PORT || 3030;  //For Heroku cloud hosting uncomment
+//var port=3030;    //Uncomment for local server 
+server.listen(port, function () {
+  console.log('Server started at '+server.address().port);
   console.log("Waiting for DB connection!!!");
   //on successfull start initiate mongo db connection
   mongo.init();
@@ -58,8 +60,8 @@ io.on('connection', function (socket) {
   socket.on("addPlayer", (data) => {
     var playerRoom = getRoomOfPlayer(data.playerID);
     if (playerRoom == null) {
-      mongo.db.collection(mongo.studentCollection).find({ 
-        "_id": data.playerID, 
+      mongo.db.collection(mongo.studentCollection).find({
+        "_id": data.playerID,
       }).toArray((err, docs) => {
         var room = sockets[socket.id].room; //getting room number
         if (err) {
@@ -72,9 +74,9 @@ io.on('connection', function (socket) {
             socket.emit('addPlayerResponse', {
               isPlayerValid: true,
               playerInfo: {
-                id: docs[0]._id,
-                Name: docs[0].StudentName,
-                QuizScore: docs[0].QuizScore
+                playerID: docs[0]._id,
+                playerName: docs[0].StudentName,
+                quizScore: docs[0].QuizScore
               }
             });
           } else {
@@ -103,64 +105,72 @@ io.on('connection', function (socket) {
   });
   socket.on("askQuestion", (data) => {
     var roomNumber = sockets[socket.id].room;
-    var qusNum = 0;
-    console.log(rooms[roomNumber].questions);
     console.log("Asking Question");
     console.log(rooms[roomNumber].answeredQuestions);
     //if all questions has been answered then can't ask further questions
+    var questionNumber = rooms[roomNumber].currentQuestion;
+    console.log("Current Question ", questionNumber);
     if (rooms[roomNumber].questions.length > rooms[roomNumber].answeredQuestions.length) {
-      while (repetedQuestion(qusNum)) {
-        qusNum = getRandomQuestionNum(0, rooms[roomNumber].questions.length); //getting random question  number
+      while (repetedQuestion(questionNumber)) {
+        console.log("Repeated question: " + repetedQuestion(questionNumber));
+        questionNumber = getRandomQuestionNum(1, rooms[roomNumber].questions.length - 1); //getting random question  number
+        console.log("Random question: " + questionNumber);
       }
-      console.log("Current Question ",qusNum);
-      rooms[roomNumber].currentQuestion = qusNum;             //this variable will keep the current question in the room
-      //On successfull generation of question number. push the question to the clients in the room
-      var question = rooms[roomNumber].questions[qusNum];
-      io.in(roomNumber).emit('question', { question: question });
-    } else {
-      io.in(roomNumber).emit('quizEnd');
+      rooms[roomNumber].answeredQuestions.push(questionNumber);     //Storing the answered question so that we don't repeat them
+      rooms[roomNumber].currentQuestion = questionNumber;             //this variable will keep the current question in the room
+      rooms[roomNumber].buzzerSequence = [];  //clearing the buzzer sequence
+      //On successfull generation of question number. push the question to the clients in the room 
+      io.in(roomNumber).emit('question', { question: rooms[roomNumber].questions[questionNumber] });
+    } else {  //End Of the Quiz
+      console.log("Quiz Ended");
+
+      io.in(roomNumber).emit('quizEnd', {
+        players: rooms[roomNumber].players
+      });
     }
   });
   socket.on("checkAnswer", (data) => {
     var roomNumber = sockets[socket.id].room;
-    var qNum = rooms[roomNumber].currentQuestion;
-    var question = rooms[roomNumber].questions[qNum];
-    console.log("answer: "+data.answer);
+    var questionNumber = rooms[roomNumber].currentQuestion;
+    var question = rooms[roomNumber].questions[questionNumber];
+    console.log("answer: " + data.answer);
     console.log(question);
-    if (question.answer==data.answer) {
-      rooms[roomNumber].answeredQuestions.push(qNum);     //Storing the answered question so that we don't repeat them
-      var players=rooms[roomNumber].players;    //Retriving player list in the room
-      var score=0;
-      for(var i=0;i<players.length;i++){
-        if(players[i].playerID==sockets[socket.id].playerID){
-          players[i].quizScore=(players[i].quizScore+1);    //Calculating the score
-          score=players[i].quizScore;
+    if (question.answer == data.answer) {
+      var players = rooms[roomNumber].players;    //Retriving player list in the room
+      var score = 0;
+      for (var i = 0; i < players.length; i++) {
+        if (players[i].playerID == sockets[socket.id].playerID) {
+          players[i].quizScore++;    //Calculating the score
+          score = players[i].quizScore;
         }
       }
-      rooms[roomNumber].players=players;    //assigning players back to the room with updated information
-      socket.emit('answerStatus',{  //letting client know about the answer statuc
-        playerScore:score,
-        isAnswerCorrect:true
+      rooms[roomNumber].players = players;    //assigning players back to the room with updated information
+      socket.emit('answerStatus', {  //letting client know about the answer statuc
+        playerScore: score,
+        isAnswerCorrect: true
       });
-      io.in(roomNumber).emit('updateScore',{  //Broadcasting in room for score update notification
-        playerScore:score,
-        playerID:sockets[socket.id].playerID
+      io.in(roomNumber).emit('updateScore', {  //Broadcasting in room for score update notification
+        playerScore: score,
+        playerID: sockets[socket.id].playerID
       });
-    }else{
-      socket.emit('answerStatus',{
-        isAnswerCorrect:false
+    } else {
+      socket.emit('answerStatus', {
+        isAnswerCorrect: false
       });
     }
   });
-  socket.on("confirmScoreRecieved",(data)=>{
-    var roomNumber=sockets[socket.id].room;
+  socket.on("confirmScoreRecieved", (data) => {
+    var roomNumber = sockets[socket.id].room;
     io.in(roomNumber).emit("readyForQuestion");
   })
   //Function to check if question has already been answered in the room
-  function repetedQuestion(qNum) {
+  function repetedQuestion(questionNumber) {
     var flag = false;
-    if (rooms[roomNumber].answeredQuestions[qNum] == true) {
-      flag = true;
+    for (var i = 0; i < rooms[roomNumber].answeredQuestions.length; i++) {
+      if (rooms[roomNumber].answeredQuestions[i] == questionNumber) {
+        flag = true;
+        break;
+      }
     }
     return flag;
   }
@@ -180,7 +190,7 @@ io.on('connection', function (socket) {
       socket.join(room);
       io.in(room).emit('playerOnline', { playerID: playerID });
     } else {
-      console.log("Player does not belong to any room");
+      console.log("Player " + playerID + " not belong to any room");
       socket.emit("invalidPlayer");
     }
   });
diff --git a/server/package.json b/server/package.json
index 51b448b..34196f2 100644
--- a/server/package.json
+++ b/server/package.json
@@ -6,7 +6,7 @@
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
-  "author": "Bajinder",
+  "author": "Bajinder,Kamaldeep,Veerpal",
   "license": "ISC",
   "repository": {
     "type": "git",
diff --git a/server/rooms.js b/server/rooms.js
index 70a6e9a..c9b37d6 100644
--- a/server/rooms.js
+++ b/server/rooms.js
@@ -2,7 +2,7 @@ exports.Room = function (room,hostSocketID) {
     this.hostSocketID=hostSocketID;
     this.players=[];
     this.questions=[];
-    this.currentQuestion=-1;
+    this.currentQuestion=0;
     this.buzzerSequence=[];
     this.answeredQuestions=[];
 }
@@ -10,6 +10,7 @@ exports.Room = function (room,hostSocketID) {
 exports.Player= function(playerSocketID,player){
     this.playerSocketID=playerSocketID;
     this.playerID=player._id;
+    this.playerName=player.StudentName;
     this.quizScore=player.QuizScore;
 }
 
-- 
2.8.1

From 9fc48f0e14500a89c704e980cd21a1d038ca46ac Mon Sep 17 00:00:00 2001
From: Bajinder Singh <BajinderSingh@MacBook-Pro.local>
Date: Thu, 22 Sep 2016 15:30:48 +1000
Subject: [PATCH] Sound effect added to player client

---
 client/config.xml | 33 +++++++++++++++++++++++++++++++--
 1 file changed, 31 insertions(+), 2 deletions(-)

diff --git a/client/config.xml b/client/config.xml
index 69e0a6f..58fe863 100644
--- a/client/config.xml
+++ b/client/config.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 <widget id="com.ionicframework.abc397654" version="0.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
-  <name>abc</name>
-  <description>An Ionic Framework and Cordova project.</description>
+  <name>Quiz Buzzer</name>
+  <description>This is quiz buzzer project</description>
   <author email="hi@ionicframework" href="http://ionicframework.com/">Ionic Framework Team</author>
   <content src="index.html"/>
   <access origin="*"/>
@@ -17,6 +17,34 @@
   <platform name="ios">
     <allow-intent href="itms:*"/>
     <allow-intent href="itms-apps:*"/>
+    <icon src="resources/ios/icon/icon.png" width="57" height="57"/>
+    <icon src="resources/ios/icon/icon@2x.png" width="114" height="114"/>
+    <icon src="resources/ios/icon/icon-40.png" width="40" height="40"/>
+    <icon src="resources/ios/icon/icon-40@2x.png" width="80" height="80"/>
+    <icon src="resources/ios/icon/icon-40@3x.png" width="120" height="120"/>
+    <icon src="resources/ios/icon/icon-50.png" width="50" height="50"/>
+    <icon src="resources/ios/icon/icon-50@2x.png" width="100" height="100"/>
+    <icon src="resources/ios/icon/icon-60.png" width="60" height="60"/>
+    <icon src="resources/ios/icon/icon-60@2x.png" width="120" height="120"/>
+    <icon src="resources/ios/icon/icon-60@3x.png" width="180" height="180"/>
+    <icon src="resources/ios/icon/icon-72.png" width="72" height="72"/>
+    <icon src="resources/ios/icon/icon-72@2x.png" width="144" height="144"/>
+    <icon src="resources/ios/icon/icon-76.png" width="76" height="76"/>
+    <icon src="resources/ios/icon/icon-76@2x.png" width="152" height="152"/>
+    <icon src="resources/ios/icon/icon-83.5@2x.png" width="167" height="167"/>
+    <icon src="resources/ios/icon/icon-small.png" width="29" height="29"/>
+    <icon src="resources/ios/icon/icon-small@2x.png" width="58" height="58"/>
+    <icon src="resources/ios/icon/icon-small@3x.png" width="87" height="87"/>
+    <splash src="resources/ios/splash/Default-568h@2x~iphone.png" width="640" height="1136"/>
+    <splash src="resources/ios/splash/Default-667h.png" width="750" height="1334"/>
+    <splash src="resources/ios/splash/Default-736h.png" width="1242" height="2208"/>
+    <splash src="resources/ios/splash/Default-Landscape-736h.png" width="2208" height="1242"/>
+    <splash src="resources/ios/splash/Default-Landscape@2x~ipad.png" width="2048" height="1536"/>
+    <splash src="resources/ios/splash/Default-Landscape~ipad.png" width="1024" height="768"/>
+    <splash src="resources/ios/splash/Default-Portrait@2x~ipad.png" width="1536" height="2048"/>
+    <splash src="resources/ios/splash/Default-Portrait~ipad.png" width="768" height="1024"/>
+    <splash src="resources/ios/splash/Default@2x~iphone.png" width="640" height="960"/>
+    <splash src="resources/ios/splash/Default~iphone.png" width="320" height="480"/>
   </platform>
   <preference name="webviewbounce" value="false"/>
   <preference name="UIWebViewBounce" value="false"/>
@@ -34,4 +62,5 @@
   <plugin name="cordova-plugin-splashscreen" spec="~3.2.2"/>
   <plugin name="cordova-plugin-statusbar" spec="~2.1.3"/>
   <plugin name="ionic-plugin-keyboard" spec="~2.2.1"/>
+  <icon src="resources/ios/icon/icon-small@3x.png"/>
 </widget>
\ No newline at end of file
-- 
2.8.1

